#include <iostream>
using namespace std;
const int ArSize = 8;
int sum_arr(int arr[], int n);

int main()
{
    int cookies[ArSize] = {1,2,4,8,16,32,64,128};
    int sum = sum_arr(cookies, ArSize);
    cout << "먹은 과자 수 합계: " << sum << "\n";
    return 0;
}

int sum_arr(int arr[], int n)
{
    int total = 0;
    
    for(int i = 0; i < n; i++)
    {
        total = total + arr[i];
    }
    return total; 
}


/*
함수와 배열
- 배열 원소들의 합을 구해주는 함수를 만들어보자.
    리턴값은 int일것이며, 매개변수로는 배열 이름 과 배열의 크기를 함께 전달해야한다.
    EX) int sum_arr(int arr[], int n)   // arr = 배열 이름, n = 크기. 
    여기서 arr는 배열이 아니라 포인터이다.

포인터와 배열을 처리하는 함수.
- C++가 배열 이름을 그 배열의 첫 번째 원소의 주소로 인식한다는것을 우리는 알고잇다.
- 우리는 다음과 같이 함수를 호출한다
    int sum = sum_arr(cookies, ArSize);
    여기서 cookies 는 배열 이름이다. 그리고 C++ 규칙에 따르면 cookies 는 그 배열의 첫 번째 원소의 주소이다. 
    따라서 sum_arr() 함수는 주소를 전달받는다. 이 배열의 원소는 int 형 이기 때문에 cookies 는 int 형을 지시하는 포인터, 즉 int * 이 어야한다.
    이 말은 함수 머리가 다음과 같아야 한다고 주장한다.
    int sum_arr(int * arr, int n)
    여기서 int * arr 는 int arr[]를 대체하였다. 두 형태는 모두 동일한 상태이기에 원하는 형식을 사용할수있다. 
*/

/*
먹은 과자 수 합계: 255
*/
