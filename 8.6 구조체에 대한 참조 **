#include <iostream>
using namespace std;
struct free_throws
{
    string name;
    int made;
    int attempts;
    float percent;
};

void set_pc(free_throws & ft);  //구조체에 대하여 참조를 사용한다.
void display(const free_throws & ft);   //구조체에 대하여 변경을 허용하지 않는다.
free_throws & accumulate (free_throws & target, const free_throws & source);

int main()
{
    free_throws one = {"Ifelsa Branch", 13, 14};
    free_throws two = {"Andor Knott" , 10, 16};
    free_throws three = {"Minnie Max" , 7, 9};
    free_throws four = {"Whily Looper" , 5, 9};
    free_throws five = {"Long Long" , 6, 14};
    free_throws team = {"Throwgoods" , 0, 0};

    free_throws dup;
    set_pc(one);
    display(one);
    accumulate(team, one);
    display(team);

    display(accumulate(team, two));
    accumulate(accumulate(team, three), four);
    display(team);

    dup = accumulate(team, five);
    cout << "team 출력:\n";
    display(team);
    cout << "대입 이후 dup 출력:\n";
    display(dup);
    set_pc(four);

    accumulate(dup, five) = four;
    cout << "문제 소지가 있는 대입 이후 dup 출력:\n";
    display(dup);
    
    return 0; 
}

void display(const free_throws & ft)
{
    cout << "Name: " << ft.name << '\n';
    cout << "Made: " << ft.made << '\t';
    cout << "Attempts: " << ft.attempts << '\t';
    cout << "Percent: " << ft.percent  << '\n';
}

void set_pc(free_throws & ft)
{
    if(ft.attempts != 0)
        ft.percent = 100.0f * float(ft.made)/float(ft.attempts);
    else
        ft.percent = 0; 
}

free_throws & accumulate(free_throws & target, const free_throws & source)
{
    target.attempts += source.attempts;
    target.made += source.made;
    set_pc(target);
    return target;
}

/*
구조체에 대한 참조
구조체에 대한 참조를 사용하는 방법
기본 데이터형의 변수에 대한 참조를 선언할 때와 마찬가지로 구조체 매개변수를 선언할 때 참조 연산자 & 를 앞에 붙이면 된다.abort
struct free_throws
{
    string name;
    int made;
    int attemps;
    float percent;
};
void set_pc(free_throws & ft);  //구조체에 대하여 참조를 사용한다.
void display(const free_throws & ft);   //구조체에 대하여 변경을 허용하지 않는다.


*/

/*
27 = 3의 세제곱
27 = 27의 세제곱
*/
