#include <iostream>
#include <cmath>
using namespace std;
struct rect     // 직각 좌표계
{
    double x;
    double y; 
};

struct polar    // 극 좌표계
{
    double distance;
    double angle;
};
void rect_to_polar(const rect * pxy, polar * pda);
void show_polar(const polar * pda);

int main()
{
    rect rplace;
    polar pplace;

    cout << "x 값과 y 값을 입력하십시오: ";
    while(cin >> rplace.x >> rplace.y)
    {
        rect_to_polar(&rplace, &pplace);
        show_polar(&pplace);
        cout << "x값과 y값을 입력하십시오 (끝내려면 q를 입력): ";
    }
    cout << "프로그램을 종료합니다. \n";
    return 0; 
}

void rect_to_polar(const rect * pxy, polar *pda)
{
    pda -> distance = sqrt(pxy -> x * pxy -> x + pxy ->y *  pxy ->y);
    pda -> angle = atan2(pxy -> y, pxy -> x);
}

void show_polar(const polar * pda)
{
    const double Rad_to_deg = 57.29577951;

    cout << "거리 = " << pda -> distance;
    cout << ", 각도 = " << pda -> angle *Rad_to_deg;
    cout << "도\n";
}

/*
구조체 주소의 전달
구조체의 주소만 전달하려면 구조체를 지시하는 포인터를 사용하도록 함수를 다시 작성해야한다.
show_polar 함수를 변경할것이다
- 함수를 호출할 때 구조체(pplace) 대신에 구조체의 주소 (&pplace)를 전달한다
- polar 형 구조체를 지시하는 포인터, 즉 polar * 형을 형식 매개변수로 선언한다. 함수가 구조체를 변경하면 안되기 때문에 const 키워드를 사용한다.
- 형식 매개변수가 구조체가 아니라 포인터이므로, 멤버 연산자(.) 대신에 간접 멤버 연산자(->) 를 사용한다.  


*/

/*
x 값과 y 값을 입력하십시오: 30 40 
거리 = 50, 각도 = 53.1301도
x값과 y값을 입력하십시오 (끝내려면 q를 입력): -100 100 
거리 = 141.421, 각도 = 135도
x값과 y값을 입력하십시오 (끝내려면 q를 입력): q
프로그램을 종료합니다. 
*/
