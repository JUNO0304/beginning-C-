#ifndef COORDIN_H_
#define COORDIN_H_

struct polar
{
    double distance;
    double angle; 
};

struct rect
{
    double x;
    double y;
};

polar rect_to_polar(rect xypos);
void show_polar(polar dapos);

#endif


////소스 코드 파일1
#include <iostream>
#include "coordin.h"
using namespace std;
int main()
{
    rect rplace;
    polar pplace;

    cout << "x 값과 y값을 입력하십시오: ";
    while(cin >> rplace.x >> rplace.y)
    {
        pplace = rect_to_polar(rplace);
        show_polar(pplace);
        cout << "x값과 y값을 입력하십시오 (끝내려면 q를 입력): ";
    }
    cout << "프로그램을 종료합니다.\n";
    return 0;
}



//// 소스 코드 파일2
#include<iostream>
#include<cmath>
#include "coordin.h"
using namespace std;

polar rect_to_polar(rect xypos)
{
    polar answer;
    
    answer.distance = sqrt(xypos.x * xypos.x +xypos.y * xypos.y);
    answer.angle = std::atan2(xypos.y, xypos.x);
    return answer;
}

void show_polar(polar dapos)
{
    const double Rad_to_deg = 57.29577951;

    cout << "거리 = " << dapos.distance;
    cout << ", 각도 = " << dapos.angle * Rad_to_deg;
    cout <<"도\n";
}


/*
분할 컴파일
큰 프로그램을 진행할때는 여러가지 함수들을 개별적인 파일에서 다루는게 더 효율적이다.
큰 프로그램에서의 템플릿 같은 존재는 헤더파일이다.
원본 프로그램을 다음과 같이 세 부분으로 분할할수 있다
-구조체 선언과, 그 구조체를 사용하는 함수들의 원형이 들어 있는 헤더 파일
-그 구조체에 관련된 함수들의 코드가 들어 있는 소스 코드 파일
-그 구조체에 관련된 함수들을 호출하는 코드가 들어 있는 소스 코드 파일

헤더 파일에는 다음과 같은 것들이 포함된다
-함수 원형
-#define 이나 const 를 사용하여 정의하는 기호 상수
-구조체 선언
-클래스 선언
-템플릿 선언
-인라인 함수

#ifndef
#define
#endif
같은 헤더파일이 한 파일에 중복 적용되는걸 방지해준다
*/

/*
x 값과 y값을 입력하십시오: 120 80
거리 = 144.222, 각도 = 33.6901도
x값과 y값을 입력하십시오 (끝내려면 q를 입력): 120 50 
거리 = 130, 각도 = 22.6199도
x값과 y값을 입력하십시오 (끝내려면 q를 입력): q
프로그램을 종료합니다.  
*/
