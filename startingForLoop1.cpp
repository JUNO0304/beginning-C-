#include <iostream>
using namespace std;

int main()
{
    int i;
    for(i=0; i < 5; i++)
    {
        cout << "c++가 루프를 사용합니다. \n";
    }
    cout << "루프를 언제 끝내야 하는지 C++ 는 알고 있습니다. \n";
    return 0; 
}

/*
    for  루프
    for 루프를 사용하면 반복적인 작업을 효율적으로 처리할수있다

    위 코드는 i를 0으로 설정하는것부터 시작한다. 
    i = 0; 
    (loop initialization) 루프 초기화 부분이다. 

    i < 5;
    (loop test) 루프 조건 검사를 활용하여 i 가 5 보다 작은지 검사한다. 

    위 조건들을 만족하면 루프 몸체(loop body) 라고 부르는 다음과 같은 구문을 수행한다 
    cout << "c++가 루프를 사용합니다. \n";
    이제 프로그램은 루프 갱신(loop update)부분에서 i 를 1 만큼 증가시킨다. 
    i++

    위 과정들은 i 가 5 가 되어 루프 조건 검사를 통과하지 못할때까지 반복한다. 

    for loop 의 작업이 실행되는 단계를 차근차근 알아보자
    1. 조건 검사에 사용할 카운터 값을 초기화한다.
    2. 루프를 진행할 것인지 조건을 검사한다
    3. 로프 몸체를 수행한다. 
    4. 카운터 값을 갱신한다. 

    루프 조건 검사에서는 주로 비교 관계를 놓아 그 관계가 참일시 루프를 수행하는 방식을 사용한다.
    하지만 루프 조건검사에는 어떠한 표현식도 사용할수 있다. 

    int main()
    {
        cout << "카운트 시작값을 입력하십시오: ";
        int limit; 
        cin >> limit;
        int i;
        for(i=limit; i; i--) // 루프 조건검사에 그저 i 만 놓으면 c++ 는 이를 bool 형으로 간주하여 값이 0 이 되면 false로 인지해서 루프를 종료시킨다.
            cout << "i = " << i << endl; 
        cout << "i = " << i << " 이므로 루프를 종료합니다. \n";

        return 0; 
    }

*/

/*
    OUTPUT
c++가 루프를 사용합니다. 
c++가 루프를 사용합니다.
c++가 루프를 사용합니다.
c++가 루프를 사용합니다.
c++가 루프를 사용합니다.
루프를 언제 끝내야 하는지 C++ 는 알고 있습니다. 


*/
