#include <iostream>
using namespace std;
template <typename T>
void Swap(T &a, T &b);

template <typename T>
void Swap(T * a, T *b, int n);

void Show(int a[]);
const int Lim = 8;

int main()
{
    int i = 10;
    int j = 20;
    cout << "i, j = " << i << ", " << j << ".\n";
    cout << "컴파일러가 생성한 int 형 교환기를 사용하면 \n";
    Swap(i,j);
    cout << "이제 i, j = " << i << ", " << j << ".\n";

    int d1[Lim] = {0, 7, 0, 4, 1, 7, 7, 6};
    int d2[Lim] = {0, 6, 2, 0, 1, 9, 6, 9};
    cout << "원본 배열:\n";
    Show(d1);
    Show(d2);
    Swap(d1,d2,Lim);
    cout << "교환된 배열:\n";
    Show(d1);
    Show(d2);
    
    return 0; 
}

template <typename T>
void Swap(T & a, T &b)
{
    T temp;
    temp = a; 
    a = b;
    b = temp;
}

template <typename T>
void Swap(T a[], T b[], int n)
{
    T temp;
    for(int i = 0; i < n; i++)
    {
        temp = a[i];
        a[i] = b[i];
        b[i] = temp;
    }
}

void Show(int a[])
{
    cout << a[0] << a[1] << "/";
    cout << a[2] << a[3] << "/";
    for(int i = 4; i < Lim; i++)
    {
        cout << a[i];
    }
    cout << endl;
}



/*
템플릿의 오버로딩
템플릿: 다양한 데이터형에 대해 같은 알고리즘을 적용하는 여러개의 함수가 필요할 때 사용한다
하지만 다른 데이터형이 항상 같은 알고리즘을 사용한다는것은 사실 불가능하다. 
이러한 가능성을 처리하기 위해 템플릿 정의를 오버로딩할수 있다
**모든 템플릿 매개변수가 일반형일 필요는 없다

*/

/*
i, j = 10, 20.
컴파일러가 생성한 int 형 교환기를 사용하면
이제 i, j = 20, 10.
원본 배열:
07/04/1776
06/20/1969
교환된 배열:
06/20/1969
07/04/1776
*/
